package com.gmail.ndonskih63;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;

public class ThreadCopy {

	private static ArrayList<String> fileList = new ArrayList<String>();

	private static ArrayList<String> getFileList(String fold) {
		File primary = new File(fold);
		if (primary.isDirectory()) {
			String[] fileTitles = primary.list();
			for (String file : fileTitles) {
				fileList.add(file);
			}
		} else {
			System.out.format("Error! The directory '%s' isn't exists ", primary);
		}
		return fileList;
	}
	private static void copying(File in, File out) throws IOException {
		try(FileInputStream fis = new FileInputStream(in);
			 FileOutputStream fos = new FileOutputStream(out)) {
			byte[] arr = new byte[1024*1024];
			int r;
			for (; (r = fis.read(arr)) > 0; )
				fos.write(arr, 0, r);
		} catch(IOException e) {
			e.printStackTrace();;
		}
	}

	public static void copyFiles(int begin, int end, String fold, String endFold) {
		Thread thr = Thread.currentThread();
		for (int i = begin; i < end; i++) {
			File file = new File(fold + "/" + fileList.get(i));
			File endFile = new File(endFold +  "/" +  fileList.get(i));
			try {
				copying(file, endFile);
				System.out.println("File " + fileList.get(i) + " copied - " + thr.getName());
				;
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	public static void multiThread(String from, String to, int threads) {
		
		int begin;
        int end;
        getFileList(from);
        SingleThread[] pool = new SingleThread[threads];
        
        long tStart = System.currentTimeMillis();
        int quant = fileList.size() / threads;
        for (int i = 0; i < threads; i++) {
        	begin = quant * i;
            end = quant * (i + 1);
            if (i == threads - 1) {
                end = fileList.size();
            }
            pool[i] = new SingleThread(begin, end, from, to);
        }
        for (int i = 0; i < pool.length; i++) {
            try {
                pool[i].getThr().join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }    
		long tEnd = System.currentTimeMillis();
		System.out.println("Files copied\nTime: " + (tEnd - tStart) + " ms.");
        }
	}
